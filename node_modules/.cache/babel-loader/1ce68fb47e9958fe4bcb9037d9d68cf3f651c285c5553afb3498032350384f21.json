{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import{UserRole}from'../types';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Check if user is stored in localStorage\nconst storedUser=localStorage.getItem('user');if(storedUser){try{const parsedUser=JSON.parse(storedUser);setUser(parsedUser);}catch(error){console.error('Failed to parse stored user:',error);localStorage.removeItem('user');}}setIsLoading(false);},[]);const login=async(email,password)=>{try{setIsLoading(true);// In a real app, we would call the API for authentication\n// For now, we'll mock a successful login with a sample user\nconst mockUser={id:'1',email,name:'Admin User',role:UserRole.ADMIN,createdAt:new Date(),updatedAt:new Date()};// Store the user in localStorage\nlocalStorage.setItem('user',JSON.stringify(mockUser));setUser(mockUser);}catch(error){console.error('Login failed:',error);throw error;}finally{setIsLoading(false);}};const logout=()=>{localStorage.removeItem('user');setUser(null);};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,isAuthenticated:!!user,isLoading,login,logout},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","UserRole","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","storedUser","localStorage","getItem","parsedUser","JSON","parse","error","console","removeItem","login","email","password","mockUser","id","name","role","ADMIN","createdAt","Date","updatedAt","setItem","stringify","logout","Provider","value","isAuthenticated","useAuth","context","Error"],"sources":["/Users/amaro/Documents/Projeto/PetCare/petcare-web/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { User, UserRole } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n      } catch (error) {\n        console.error('Failed to parse stored user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      setIsLoading(true);\n      // In a real app, we would call the API for authentication\n      // For now, we'll mock a successful login with a sample user\n      const mockUser: User = {\n        id: '1',\n        email,\n        name: 'Admin User',\n        role: UserRole.ADMIN,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      // Store the user in localStorage\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      setUser(mockUser);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated: !!user, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CAC7E,OAAeC,QAAQ,KAAQ,UAAU,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAU1C,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAA8BQ,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,YAAqD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChF,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACa,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAU,IAAI,CAAC,CAEzDC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAc,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAC/C,GAAIF,UAAU,CAAE,CACd,GAAI,CACF,KAAM,CAAAG,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CACzCH,OAAO,CAACM,UAAU,CAAC,CACrB,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDL,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC,CACjC,CACF,CACAT,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAU,KAAK,CAAG,KAAAA,CAAOC,KAAa,CAAEC,QAAgB,GAAoB,CACtE,GAAI,CACFZ,YAAY,CAAC,IAAI,CAAC,CAClB;AACA;AACA,KAAM,CAAAa,QAAc,CAAG,CACrBC,EAAE,CAAE,GAAG,CACPH,KAAK,CACLI,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE3B,QAAQ,CAAC4B,KAAK,CACpBC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACrBC,SAAS,CAAE,GAAI,CAAAD,IAAI,CAAC,CACtB,CAAC,CAED;AACAjB,YAAY,CAACmB,OAAO,CAAC,MAAM,CAAEhB,IAAI,CAACiB,SAAS,CAACT,QAAQ,CAAC,CAAC,CACtDf,OAAO,CAACe,QAAQ,CAAC,CACnB,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrC,KAAM,CAAAA,KAAK,CACb,CAAC,OAAS,CACRP,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED,KAAM,CAAAuB,MAAM,CAAGA,CAAA,GAAY,CACzBrB,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC,CAC/BX,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED,mBACEP,IAAA,CAACC,WAAW,CAACgC,QAAQ,EAACC,KAAK,CAAE,CAAE5B,IAAI,CAAE6B,eAAe,CAAE,CAAC,CAAC7B,IAAI,CAAEE,SAAS,CAAEW,KAAK,CAAEa,MAAO,CAAE,CAAA3B,QAAA,CACtFA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,MAAO,MAAM,CAAA+B,OAAO,CAAGA,CAAA,GAAuB,CAC5C,KAAM,CAAAC,OAAO,CAAGxC,UAAU,CAACI,WAAW,CAAC,CACvC,GAAI,CAACoC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}