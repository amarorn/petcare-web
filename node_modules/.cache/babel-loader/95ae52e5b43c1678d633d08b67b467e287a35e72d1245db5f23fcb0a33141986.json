{"ast":null,"code":"var _jsxFileName = \"/Users/amaro/Documents/Projeto/PetCare/petcare-web/src/context/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { UserRole } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n      } catch (error) {\n        console.error('Failed to parse stored user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      // In a real app, we would call the API for authentication\n      // For now, we'll mock a successful login with a sample user\n      const mockUser = {\n        id: '1',\n        email,\n        name: 'Admin User',\n        role: UserRole.ADMIN,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // Store the user in localStorage\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      setUser(mockUser);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated: !!user,\n      isLoading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","UserRole","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","storedUser","localStorage","getItem","parsedUser","JSON","parse","error","console","removeItem","login","email","password","mockUser","id","name","role","ADMIN","createdAt","Date","updatedAt","setItem","stringify","logout","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/amaro/Documents/Projeto/PetCare/petcare-web/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { User, UserRole } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n      } catch (error) {\n        console.error('Failed to parse stored user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      setIsLoading(true);\n      // In a real app, we would call the API for authentication\n      // For now, we'll mock a successful login with a sample user\n      const mockUser: User = {\n        id: '1',\n        email,\n        name: 'Admin User',\n        role: UserRole.ADMIN,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      // Store the user in localStorage\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      setUser(mockUser);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isAuthenticated: !!user, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAAeC,QAAQ,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAU1C,MAAMC,WAAW,gBAAGP,aAAa,CAA8BQ,SAAS,CAAC;AAEzE,OAAO,MAAMC,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAU,IAAI,CAAC;EAEzDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,IAAI;QACF,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;QACzCH,OAAO,CAACM,UAAU,CAAC;MACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDL,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;MACjC;IACF;IACAT,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAoB;IACtE,IAAI;MACFZ,YAAY,CAAC,IAAI,CAAC;MAClB;MACA;MACA,MAAMa,QAAc,GAAG;QACrBC,EAAE,EAAE,GAAG;QACPH,KAAK;QACLI,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE3B,QAAQ,CAAC4B,KAAK;QACpBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBC,SAAS,EAAE,IAAID,IAAI,CAAC;MACtB,CAAC;;MAED;MACAjB,YAAY,CAACmB,OAAO,CAAC,MAAM,EAAEhB,IAAI,CAACiB,SAAS,CAACT,QAAQ,CAAC,CAAC;MACtDf,OAAO,CAACe,QAAQ,CAAC;IACnB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK;IACb,CAAC,SAAS;MACRP,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMuB,MAAM,GAAGA,CAAA,KAAY;IACzBrB,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BX,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAAE5B,IAAI;MAAE6B,eAAe,EAAE,CAAC,CAAC7B,IAAI;MAAEE,SAAS;MAAEW,KAAK;MAAEa;IAAO,CAAE;IAAA5B,QAAA,EACtFA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClC,EAAA,CAtDWF,YAAqD;AAAAqC,EAAA,GAArDrC,YAAqD;AAwDlE,OAAO,MAAMsC,OAAO,GAAGA,CAAA,KAAuB;EAAAC,GAAA;EAC5C,MAAMC,OAAO,GAAG9C,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAAC0C,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}